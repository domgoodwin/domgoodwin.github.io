<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dom Goodwin</title>
    <link>/post/</link>
    <description>Recent content in Posts on Dom Goodwin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Jan 2022 12:06:09 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Networking: #1</title>
      <link>/post/kubernetes-networking-overview/</link>
      <pubDate>Mon, 10 Jan 2022 12:06:09 +0000</pubDate>
      
      <guid>/post/kubernetes-networking-overview/</guid>
      <description>&lt;p&gt;Kubernetes networking can be a bit of a rabbit hole to debug and discover what your pods are actually doing. In this post we’ll explore at a high level how a request goes from 1 pod to another and which components control each.&lt;/p&gt;</description>
      <content>&lt;p&gt;Kubernetes networking can be a bit of a rabbit hole to debug and discover what your pods are actually doing. In this post we’ll explore at a high level how a request goes from 1 pod to another and which components control each.&lt;/p&gt;
&lt;h2 id=&#34;components&#34;&gt;Components&lt;/h2&gt;
&lt;p&gt;The components we’re going to look at today are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kube-dns/coredns&lt;/code&gt; resolves domain names for services (and pods) into an IP address
&lt;ul&gt;
&lt;li&gt;ℹ️ &lt;code&gt;kube-dns&lt;/code&gt; was replaced by &lt;code&gt;coredns&lt;/code&gt; but the in cluster service is still called &lt;code&gt;kube-dns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This is the resolver for any DNS requests inside your pods, if you wanted to resolve internal service domains or to a private DNS resolver, you could configure this to forward those requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kube-proxy&lt;/code&gt; resolves network requests for the IP address of a service to the IP addresses of pods which match that service. This has different modes:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Iptables&#34;&gt;iptables&lt;/a&gt; (default) - To see your iptables rules: &lt;code&gt;iptables -L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2018/07/09/ipvs-based-in-cluster-load-balancing-deep-dive/&#34;&gt;ipvs&lt;/a&gt; - To see your ipvs rules &lt;code&gt;ipvsadm -Ln&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Your chosen &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/#calico&#34;&gt;CNI&lt;/a&gt;, there’s a range of these, all which work differently. Generally a CNI will configure any networking around a Pod IP, routing to and from pods to:
&lt;ul&gt;
&lt;li&gt;Ensure pod network requests are routed properly to other pods&lt;/li&gt;
&lt;li&gt;Ensure pod network requests can reach outside the cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An easy way of thinking about it can be, resolving between a service and healthy pods is &lt;code&gt;kube-dns&lt;/code&gt; and &lt;code&gt;kube-proxy&lt;/code&gt; but then that request will need to go through routing setup by the &lt;code&gt;CNI&lt;/code&gt;. For cloud environments, your &lt;code&gt;CNI&lt;/code&gt; will usually handle (or provide ways to setup) things like cross-subnet traffic as well.&lt;/p&gt;
&lt;p&gt;To follow the resolution between components, say we wanted to go to a service called &lt;code&gt;myapp&lt;/code&gt; which sits in namespace &lt;code&gt;namespace001&lt;/code&gt; which had 2 healthy pods matching the service selector. The resolution would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CoreDNS:&lt;/strong&gt; (service FQDN)&lt;code&gt;myapp.namespace001.svc.cluster.local&lt;/code&gt; → &lt;code&gt;172.16.10.10&lt;/code&gt; (service cluster IP)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iptables:&lt;/strong&gt; &lt;code&gt;172.16.10.10&lt;/code&gt; → &lt;code&gt;10.10.10.10&lt;/code&gt; (a pod IP, selected at random from healthy pods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI:&lt;/strong&gt; Will route traffic for &lt;code&gt;10.10.10.10&lt;/code&gt; from the requester node, to the target node&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;example-journey-of-a-request&#34;&gt;Example journey of a request&lt;/h2&gt;
&lt;p&gt;As an example, let’s explore in an example Kubernetes cluster how a pod will send a network request to another pod.
For this example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The pod will try to talk to a pod on another node then itself&lt;/li&gt;
&lt;li&gt;The 2 nodes will be in seperate subnets
&lt;ul&gt;
&lt;li&gt;Routing between subnets is presumed to be setup and fine and we’ll abstract that to a &lt;code&gt;router&lt;/code&gt; in the diagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CNI&lt;/code&gt; will be Calico, but we won’t be looking too much into its internals&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pod-0&lt;/strong&gt; will send a request to &lt;strong&gt;pod-3&lt;/strong&gt; through a service&lt;/li&gt;
&lt;li&gt;We’ll assume Kubernetes and Calico are setup with defaults:
&lt;ul&gt;
&lt;li&gt;iptables mode for &lt;code&gt;kube-proxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vxlan encapsulation for cross subnet traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;a href=&#34;/img/k8s_network_request_example.png&#34; &gt;
    &lt;img src=&#34;/img/k8s_network_request_example.png&#34;   /&gt;
    
    &lt;/a&gt;
  &lt;/figure&gt;


&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;pod-0&lt;/strong&gt; requests the service’s Cluster IP from &lt;code&gt;kube-dns&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kube-dns&lt;/code&gt; has dynamic config which updates mapping the service name to a Service IP address lets say &lt;code&gt;172.16.10.10&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;`kubectl exec command for coredns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;technically this whole request to &lt;code&gt;kube-dns&lt;/code&gt; goes via the same iptables→routing tables path since &lt;code&gt;kube-dns&lt;/code&gt; runs in pods on the cluster. The only key difference is the DNS resolver is an IP address so it doesn’t ask &lt;code&gt;kube-dns&lt;/code&gt; to define &lt;code&gt;kube-dns&lt;/code&gt;. But trying to show aswell would be madness.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With the cluster IP (&lt;code&gt;172.16.10.10&lt;/code&gt;) the request hits iptables
&lt;ul&gt;
&lt;li&gt;iptables selects from a random one of the pod IP addresses for this particular service IP
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iptables -L&lt;/code&gt; or &lt;code&gt;iptables-save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;These rules are all loaded in here and dynamically updated by `kube-proxy If a pod starts failing Readiness checks for instance, it gets removed from this list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Pod IP is now resolved in the nodes routing tables &lt;code&gt;sudo route -n&lt;/code&gt; or &lt;code&gt;ip route list&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;These routing table rules will be configured based on the network environment the node sits in. Calico, running locally, will also configure rules for pod networking.&lt;/li&gt;
&lt;li&gt;Based on the Pod IP, it’ll be resolved through multiple sets of rules:
&lt;ul&gt;
&lt;li&gt;This node will have a range of Pod IPs which resolve to the local node itself&lt;/li&gt;
&lt;li&gt;This node will also have an IP range for nodes inside the same subnet - these could avoid encapsulation for performance gain&lt;/li&gt;
&lt;li&gt;This node also has range(s) for other subnets, if it’s not local to the node or subnet, it then gets routed to the subnet routing table. For these rules, Calico might instead route traffic to itself to be encapsulated before crossing the network boundary.&lt;/li&gt;
&lt;li&gt;There also might be a range for external traffic not local to the network, but if this was a private subnet this is most likely behind a NAT gateway inside the local network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This particular request is destined for another subnet. The routing table has directed the request to the Calico pod running locally on this node to handle routing this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Calico will now encapsulate the network request to allow it to pass subnet boundaries &lt;code&gt;calicoctl node status&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;By encapsulating the request’s original networking information is wrapped up as data and new network info is added&lt;/li&gt;
&lt;li&gt;Calico will send this as a vxlan or ipinip packet to the required node in another subnet&lt;/li&gt;
&lt;li&gt;The encapsulated packet (shown as an orange line) will:
&lt;ul&gt;
&lt;li&gt;Go back through the route table on the node itself&lt;/li&gt;
&lt;li&gt;To the local subnet router, which will resolve which subnet it needs to go into&lt;/li&gt;
&lt;li&gt;Hit the destination subnet routing table which can direct it to the node&lt;/li&gt;
&lt;li&gt;To the other node itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once the encapsulted packet arrived at the other node, it’ll go through iptables rules to see if it’s allowed traffic.
&lt;ul&gt;
&lt;li&gt;This is why you might need to add the encapsulated packets into your firewall rules to be allowed in.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The routing table on this node will now:
&lt;ul&gt;
&lt;li&gt;Send the encapsulated packet to the local Calico to be unencapsulated&lt;/li&gt;
&lt;li&gt;The original (unencapsulated) network request will resolve again in iptables and routing tables rules to determine where it should go
&lt;ul&gt;
&lt;li&gt;This could also cause the packet to have to be routed again since the destination has moved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The request is directed to the pod running locally&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;there-are-a-lot-of-things-missed-off-here&#34;&gt;There are a lot of things missed off here:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.adminsehow.com/2011/09/iptables-packet-traverse-map/&#34;&gt;Technically iptables is interacted with before, after (and sometimes during) a routing decision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How the pod sits within it’s own &lt;a href=&#34;https://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/&#34;&gt;network namespace&lt;/a&gt; with a virtual ethernet interface for traffic coming to the pod&lt;/li&gt;
&lt;li&gt;How Calico uses &lt;a href=&#34;https://projectcalico.docs.tigera.io/reference/felix/&#34;&gt;Felix&lt;/a&gt; to program it’s routes and ACLs and &lt;a href=&#34;https://bird.network.cz/&#34;&gt;BIRD&lt;/a&gt; for distributing the routes to BGP peers on the network&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/&#34;&gt;Alternate CNIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How the whole kube-proxy aspects could be stipped out for an eBPF approach (Calico’s &lt;a href=&#34;https://projectcalico.docs.tigera.io/maintenance/ebpf/enabling-bpf&#34;&gt;eBPF dataplane&lt;/a&gt; or Cilium and it’s &lt;a href=&#34;https://docs.cilium.io/en/v1.9/gettingstarted/kubeproxy-free/&#34;&gt;kube proxy replacement&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;related-docs&#34;&gt;Related docs:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projectcalico.docs.tigera.io/reference/architecture/overview&#34;&gt;Calico Component Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/&#34;&gt;kube-proxy reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&#34;&gt;Kubernetes DNS docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
    <item>
      <title>Kubernetes Debugging</title>
      <link>/post/kubernetes-debugging/</link>
      <pubDate>Mon, 20 Apr 2020 14:57:09 +0100</pubDate>
      
      <guid>/post/kubernetes-debugging/</guid>
      <description>&lt;p&gt;This is a workflow to debug common Kubernetes problems when deploying applications.&lt;/p&gt;</description>
      <content>&lt;p&gt;This is a workflow to debug common Kubernetes problems when deploying applications.&lt;/p&gt;
&lt;p&gt;Click on the image to see it in further detail&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;a href=&#34;/img/k8s_debugging_v1.svg&#34; &gt;
    &lt;img src=&#34;/img/k8s_debugging_v1.svg&#34;   /&gt;
    
    &lt;/a&gt;
  &lt;/figure&gt;</content>
    </item>
    
    <item>
      <title>Shellscript Notes</title>
      <link>/post/shellscript-day2/</link>
      <pubDate>Thu, 20 Feb 2020 15:25:00 +0100</pubDate>
      
      <guid>/post/shellscript-day2/</guid>
      <description>&lt;p&gt;Useful shellscript snippets&lt;/p&gt;</description>
      <content>&lt;p&gt;Useful shellscript snippets&lt;/p&gt;
&lt;h2 id=&#34;commonly-used&#34;&gt;Commonly used&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check if variable contains mystring&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $var &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; *mystring*  &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# The double closed brackets are essential for wildcard match&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;it does&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Split on &amp;#34;:&amp;#34; and get 1st&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker-image:0.1&amp;#34;&lt;/span&gt; | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; -f1 &lt;span style=&#34;color:#75715e&#34;&gt;# returns docker-image&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Find and replace all via pipe&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello I&amp;#39;m Dom&amp;#34;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/Dom/&amp;lt;void&amp;gt;/g&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;/&amp;#34; could be any char&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# Redirect stdout and stderr to the void&lt;/span&gt;
./run_script.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Read top lines of file&lt;/span&gt;
head -n &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; myfile

&lt;span style=&#34;color:#75715e&#34;&gt;# Read bottom lines of file&lt;/span&gt;
tail -n &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; myfile

&lt;span style=&#34;color:#75715e&#34;&gt;# Watch all updates to file&lt;/span&gt;
tail -f myfile

&lt;span style=&#34;color:#75715e&#34;&gt;# Read file in window (not cat)&lt;/span&gt;
less myfile

&lt;span style=&#34;color:#75715e&#34;&gt;# Make all directories if not exist&lt;/span&gt;
mkdir -p exist/not/dir

&lt;span style=&#34;color:#75715e&#34;&gt;# Visualise dir structure&lt;/span&gt;
tree -L &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Remove env variable&lt;/span&gt;
unset myvar

&lt;span style=&#34;color:#75715e&#34;&gt;# Alias command to short one&lt;/span&gt;
alias lc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ls -laht&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# unalias to remove&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Piping output&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;overwrite&amp;#34;&lt;/span&gt; &amp;gt; file &lt;span style=&#34;color:#75715e&#34;&gt;# Same as 1&amp;gt;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;append&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;system&#34;&gt;System&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See disk space usage (human readable)&lt;/span&gt;
df -h

&lt;span style=&#34;color:#75715e&#34;&gt;# See file usage for dirs&lt;/span&gt;
du &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;--max-depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Show running processes, a: show other user, u: show username, x: show non terminal&lt;/span&gt;
ps -aux

&lt;span style=&#34;color:#75715e&#34;&gt;# Show usage&lt;/span&gt;
top
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tricks&#34;&gt;Tricks&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use command output as if it&amp;#39;s file&lt;/span&gt;
diff &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;grep string file1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;grep string file2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Repeat last 3 command&lt;/span&gt;
!!

&lt;span style=&#34;color:#75715e&#34;&gt;# Repeat last arg of the last command&lt;/span&gt;
!$

&lt;span style=&#34;color:#75715e&#34;&gt;# Take all args from previous and use&lt;/span&gt;
!:1-$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;io&#34;&gt;IO&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Secure input&lt;/span&gt;
read -s -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password: &amp;#34;&lt;/span&gt; password

&lt;span style=&#34;color:#75715e&#34;&gt;# Default value&lt;/span&gt;
read -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Address [http://127.0.0.1]: &amp;#34;&lt;/span&gt; ADDR
default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1&amp;#34;&lt;/span&gt;
ADDR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ADDR&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;$default&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;jq&#34;&gt;jq&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get value from object within array within object&lt;/span&gt;
jq -rec &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.parent.children | .[] | .name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# raw:no quotes, e:null exit0, compact&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Get object attr and value and format &amp;#34;Key=$attr,Value=$val&amp;#34;&lt;/span&gt;
jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.data | keys[] as $k | &amp;#34;Key=\($k),Value=\(.[$k])&amp;#34;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Use output in for loop&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; object in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;JSON&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | jq -rec &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.entries[] | .whole | @base64&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is the value: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;val&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; | base64 -d | jq .attribute&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Args&lt;/span&gt;
curl localhost:8500/v1/catalog/nodes | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    jq &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --arg ip &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;./get_host.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.[] | select(.Address==$ip)&amp;#39;&lt;/span&gt;
        
&lt;span style=&#34;color:#75715e&#34;&gt;# Output mulitple entries in list&lt;/span&gt;
jq -rec &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[.importItems[].itemId]&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Create object&lt;/span&gt;
jq -rec &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{} +{ Items:[.importItems[].itemId]}&amp;#39;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;behaviour&#34;&gt;Behaviour&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Exit script if commands return nonzero&lt;/span&gt;
set -e

&lt;span style=&#34;color:#75715e&#34;&gt;# Output command as they run (debug)&lt;/span&gt;
set -x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Podcasts reccomendations - 07/2019</title>
      <link>/post/podcasts-2019-q2/</link>
      <pubDate>Mon, 22 Jul 2019 11:28:19 +0100</pubDate>
      
      <guid>/post/podcasts-2019-q2/</guid>
      <description>&lt;p&gt;These are my currently podcast reccomendations for Q2 2019&lt;/p&gt;</description>
      <content>&lt;p&gt;These are my currently podcast reccomendations for Q2 2019&lt;/p&gt;
&lt;h2 id=&#34;the-teachers-pet&#34;&gt;The Teacher&amp;rsquo;s Pet&lt;/h2&gt;
&lt;p&gt;A great true crime podcast exploring a 36 year old cold case around a woman who went missing and who&amp;rsquo;s husband brought his 17 year old, school girl, girlfriend into the house within 2 days.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ep. 1: Bayview&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-weeds&#34;&gt;The Weeds&lt;/h2&gt;
&lt;p&gt;Podcast from Vox where they do a deep dive into a topic for ~1hr. If you pick an episode with an good topic usually very informative and interesting listen.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-1&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Americas two housing crises&lt;/li&gt;
&lt;li&gt;Into the weeds with Elizabeth Warren&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gangster-capitalism&#34;&gt;Gangster Capitalism&lt;/h2&gt;
&lt;p&gt;Series 1 of the podcast covers the admissions scandal with some truly horrific stories of entitled parents. The podcast really going into the inner works of the scams being done and the unprecedented scale of the system in place.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-2&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;S1 [1] The Side Door&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-shrink-next-door&#34;&gt;The Shrink Next Door&lt;/h2&gt;
&lt;p&gt;A deeply interesting and weird story around a therapist who abused his position with his patients. Focuses mainly on this one individual who got taken advantage of to a ridiculous level, leading to him being ostracised from his family and friends.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-3&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Welcome To The Neighborhood | 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dissect&#34;&gt;Dissect&lt;/h2&gt;
&lt;p&gt;Season 4 of Dissect covers Tyler the Creators album, Flower Boy. An amazing and indepth look into this brilliant album with some bonus episodes covering some of his over work including his new album, Igor.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-4&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;S4E1 - Tyler the Creator: Flower Boy&lt;/li&gt;
&lt;li&gt;Dissecting Igor with Anthony Fantano&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</content>
    </item>
    
    <item>
      <title>Podcast reccomendations - 02/2019</title>
      <link>/post/podcasts-2019-q1/</link>
      <pubDate>Tue, 12 Feb 2019 14:31:03 +0000</pubDate>
      
      <guid>/post/podcasts-2019-q1/</guid>
      <description>&lt;p&gt;These are my currently podcast reccomendations for Q1 2019&lt;/p&gt;</description>
      <content>&lt;p&gt;These are my currently podcast reccomendations for Q1 2019&lt;/p&gt;
&lt;h2 id=&#34;the-butterfly-effect&#34;&gt;The Butterfly Effect&lt;/h2&gt;
&lt;p&gt;Jon Ronson&amp;rsquo;s Audible exclusive (now available everywhere) where he explores the affect PornHub had on the porn industy. Very insighful and interesting, each episodes covering a broad area such as the impact on kids in school. Only 7 (+1 bonus) episodes but still covers a lot.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ep. 1: A Nondescript Building in Montreal&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-last-days-of-august&#34;&gt;The Last Days of August&lt;/h2&gt;
&lt;p&gt;Following on from The Butterfly Effect, released this year on Audible (public release in April), Jon explores the death of a famous porn star and the mystery surrounding her death and her husband.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-1&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ep. 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bear-brook&#34;&gt;Bear Brook&lt;/h2&gt;
&lt;p&gt;True Crime stories focussed around two barrels of bodies found in the woods. The podcast covers how crime investigations methodologies were changed forever by the techniques used.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-2&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ep. 1: Hide and Seek&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;this-american-life&#34;&gt;This American Life&lt;/h2&gt;
&lt;p&gt;A classic podcast but some recent episodes are worth a mention, first covers&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-3&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;#661: But that&amp;rsquo;s what happened&lt;/li&gt;
&lt;li&gt;#657: The Runaways&lt;/li&gt;
&lt;li&gt;#486: Valentines Day (Act 2 in particular)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cortex&#34;&gt;Cortex&lt;/h2&gt;
&lt;p&gt;Two youtube/podcast company owners discuss productivity, goal planning, efficiency and technology&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-4&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;78: State of the Apps 2019&lt;/li&gt;
&lt;li&gt;72: Adulting Complete&lt;/li&gt;
&lt;li&gt;79: 2019 Yearly Themes&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</content>
    </item>
    
    <item>
      <title>Setting up a Hugo Blog</title>
      <link>/post/setup/</link>
      <pubDate>Fri, 06 Apr 2018 11:03:53 +0100</pubDate>
      
      <guid>/post/setup/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is a Go based, static site generator. It has some &lt;a href=&#34;https://www.youtube.com/watch?v=CdiDYZ51a2o&#34;&gt;impressive&lt;/a&gt; benchmarking figures, a &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;huge catalog&lt;/a&gt; of impressive themes and means I don&amp;rsquo;t have to write HTML.&lt;/p&gt;</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is a Go based, static site generator. It has some &lt;a href=&#34;https://www.youtube.com/watch?v=CdiDYZ51a2o&#34;&gt;impressive&lt;/a&gt; benchmarking figures, a &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;huge catalog&lt;/a&gt; of impressive themes and means I don&amp;rsquo;t have to write HTML.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m setting this up with the follow configuratons&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Ubuntu 16.04 LTS
Hugo 0.32
Go 1.9.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h1&gt;
&lt;p&gt;Ubuntu/Debian:&lt;br&gt;
&lt;code&gt;sudo apt-get install hugo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Check it&amp;rsquo;s installed correctly:&lt;br&gt;
&lt;code&gt;hugo version&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;creating-your-site&#34;&gt;Creating your site&lt;/h1&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic setup&lt;/h2&gt;
&lt;p&gt;To generate your base site:&lt;br&gt;
&lt;code&gt;hugo new site my-blog&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This will create a folder, my-blog, in your current directory&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The folder structure will be:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-file&#34; data-lang=&#34;file&#34;&gt;+--archetypes/     Templates for content files  
+--content/        Where content for your site goes  
+--data/           Config files for generating your site  
+--layouts/        Html templates for content views  
+--static/         All static content for site goes here  
config.toml        General site properties like: theme, title  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setup your site as a git repo:&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-a-theme&#34;&gt;Using a theme&lt;/h2&gt;
&lt;p&gt;Pick a theme you want to use from &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As themes are stored as git repos, the best way to use one is a submodule&lt;br&gt;
&lt;code&gt;git submodule add {THEME-REPO} themes/{THEME-NAME}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once the submodule has been added, add this line to your &lt;em&gt;config.toml&lt;/em&gt;:&lt;br&gt;
&lt;code&gt;theme = &amp;quot;{THEME-NAME}&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To see what your theme looks like, run the Hugo server:&lt;br&gt;
&lt;code&gt;hugo server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Your empty site should be availbale at:&lt;br&gt;
&lt;code&gt;localhost:1313&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-content&#34;&gt;Adding content&lt;/h2&gt;
&lt;p&gt;To create a new post for your site:&lt;br&gt;
&lt;code&gt;hugo new post/hello-world.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By default (because of the archetypes/default.md) your post file will look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;title: &amp;#34;Hello World&amp;#34;  
date: 2018-04-06T11:03:53+01:00  
draft: true  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To see your page, you need to run the server with drafts enabled:&lt;br&gt;
&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;overriding-themes&#34;&gt;Overriding themes&lt;/h2&gt;
&lt;p&gt;You might want to change how a theme renders something. To do this, it&amp;rsquo;s easy. Just copy the files you want to change from:&lt;br&gt;
&lt;code&gt;themes/{THEME-NAME}/layouts/&lt;/code&gt; to: &lt;code&gt;layouts/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then the files in the root layouts folder will override your theme ones&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Podcast reccomendations - 04/2018</title>
      <link>/post/podcasts/</link>
      <pubDate>Wed, 04 Apr 2018 22:03:36 +0100</pubDate>
      
      <guid>/post/podcasts/</guid>
      <description>&lt;p&gt;These are my currently podcast reccomendations as of April 2018&lt;/p&gt;</description>
      <content>&lt;p&gt;These are my currently podcast reccomendations as of April 2018&lt;/p&gt;
&lt;h2 id=&#34;reply-all&#34;&gt;Reply All&lt;/h2&gt;
&lt;p&gt;Every week, you&amp;rsquo;re presented with an intersting tale relating to the internet. From online bounty hunters to crowdsourcing medical advice, this podcast&amp;rsquo;s range of stories are always interesting and worth a listen.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Long Distance : #102 / #103&lt;/li&gt;
&lt;li&gt;The Secret Life of Alex Goldman : #96&lt;/li&gt;
&lt;li&gt;Boy in Photo : #79&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;this-american-life&#34;&gt;This American Life&lt;/h2&gt;
&lt;p&gt;This American Life is one of the most popular podcasts of all time. With over twenty years worth of archives, the amount of amazing episodes are endless.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-1&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Human Error in Voltile Situations : #634&lt;/li&gt;
&lt;li&gt;20 Acts in 60 Minutes : #241&lt;/li&gt;
&lt;li&gt;Five Women : #640&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;my-favourite-murder&#34;&gt;My Favourite Murder&lt;/h2&gt;
&lt;p&gt;Every week, the hosts tell some of their favourite, most interesting true crime, murder stories.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-2&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;My Firstest Murder : #1&lt;/li&gt;
&lt;li&gt;Decompressions : #102&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sawbones&#34;&gt;Sawbones&lt;/h2&gt;
&lt;p&gt;A look into the history of how illnesses and medcial problems were &lt;em&gt;solved&lt;/em&gt; throughout time. Makes you wonder if we&amp;rsquo;re as wrong now as our ancestors were.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-3&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The Women Who Gave Birth to Rabbits&lt;/li&gt;
&lt;li&gt;Opioid Addiction&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;no-such-thing-as-a-fish&#34;&gt;No Such Thing As A Fish&lt;/h2&gt;
&lt;p&gt;The researches behind the facts for QI talk about their favourites facts of the week.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-4&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Really any, they&amp;rsquo;re all great&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;page-94-the-private-eye-podcast&#34;&gt;Page 94: The Private Eye Podcast&lt;/h2&gt;
&lt;p&gt;A more detailed look into some stories within Private Eye.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-5&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Hospital and Hacks&lt;/li&gt;
&lt;li&gt;Credit and Christmas&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;disect&#34;&gt;Disect&lt;/h2&gt;
&lt;p&gt;Long form music analysis, each season focussing on an album.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-6&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;S2E1 - Kanye West: The Elephant in the Room&lt;/li&gt;
&lt;li&gt;S1E9 - Alright by Kendrick Lamar&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;hello-internet&#34;&gt;Hello Internet&lt;/h2&gt;
&lt;p&gt;Two very inteligent, insightful and interesting people discuss topics of note; always thought provoking.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-7&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Being Wrong on The Internet, #1&lt;/li&gt;
&lt;li&gt;Mr Chompers, #93&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;freakonomics&#34;&gt;Freakonomics&lt;/h2&gt;
&lt;p&gt;Two economist explore the hidden side of everything, from pizza stores to chuck e cheeses.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-8&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What Are you Waiting For?&lt;/li&gt;
&lt;li&gt;How Big is My Penis? (And Other Things We Ask Google)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;my-dad-wrote-a-porno&#34;&gt;My Dad Wrote A Porno&lt;/h2&gt;
&lt;p&gt;I think the title of this one really says it all.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-9&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;S1E1 - &amp;lsquo;The Job Interview;&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mortified&#34;&gt;Mortified&lt;/h2&gt;
&lt;p&gt;Adults tell the embarrassing stories of things they did as kids.&lt;/p&gt;
&lt;h3 id=&#34;episodes-to-get-started-10&#34;&gt;Episodes to get started&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Titanic Ruined My Love Life, #88&lt;/li&gt;
&lt;li&gt;How to Become a Catfish, #105&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;notable-mentions&#34;&gt;Notable mentions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;S-Town, Serial, Crimetown&lt;/p&gt;
&lt;/blockquote&gt;</content>
    </item>
    
  </channel>
</rss>
